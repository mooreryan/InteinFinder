{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"InteinFinder InteinFinder: automated intein detection from large protein datasets InteinFinder is an automated pipeline for identifying, cataloging, and removing inteins from peptide sequences. InteinFinder accurately screens proteins for inteins and is scalable to large peptide sequence datasets. Background Inteins are mobile genetic elements found within the coding regions of genes. The protein equivalent of introns, they are transcribed and translated along with their flanking protein fragments (exteins) before splicing out from the precursor protein. They are found throughout the tree of life, including viruses and bacteriophages. Whereas inteins were previously thought to be parasitic genetic elements providing no benefit to the host organism, recent studies suggest that inteins may impact host ecology by acting as environmental \u201csensors\u201d exhibiting post-translational control on extein sequences. This property and others make inteins useful tools for biotechnology applications in molecular biology and protein engineering. As inteins are mobile, their presence confounds evolutionary and ecological studies of protein coding genes, especially those used in viral ecology, necessitating their removal prior to phylogenetic and other analyses. Given the increased interest in inteins, more studies are focusing on identifying inteins within a set of genomes or other large datasets. The process of screening peptide sequences for the presence of inteins has not been consolidated into a single pipeline. To address this, we developed InteinFinder, an automated pipeline for identifying, cataloging, and removing inteins from peptide sequences. InteinFinder accurately screens proteins for inteins and is scalable to large peptide sequence datasets. License Software Copyright (c) 2018 - 2023 Ryan M. Moore Licensed under the Apache License, Version 2.0 or the MIT license, at your option. This program may not be copied, modified, or distributed except according to those terms. Documentation Copyright (c) 2022 - 2023 Ryan M. Moore. This documentation is licensed under a Creative Commons Attribution 4.0 International License .","title":"InteinFinder"},{"location":"#inteinfinder","text":"InteinFinder: automated intein detection from large protein datasets InteinFinder is an automated pipeline for identifying, cataloging, and removing inteins from peptide sequences. InteinFinder accurately screens proteins for inteins and is scalable to large peptide sequence datasets.","title":"InteinFinder"},{"location":"#background","text":"Inteins are mobile genetic elements found within the coding regions of genes. The protein equivalent of introns, they are transcribed and translated along with their flanking protein fragments (exteins) before splicing out from the precursor protein. They are found throughout the tree of life, including viruses and bacteriophages. Whereas inteins were previously thought to be parasitic genetic elements providing no benefit to the host organism, recent studies suggest that inteins may impact host ecology by acting as environmental \u201csensors\u201d exhibiting post-translational control on extein sequences. This property and others make inteins useful tools for biotechnology applications in molecular biology and protein engineering. As inteins are mobile, their presence confounds evolutionary and ecological studies of protein coding genes, especially those used in viral ecology, necessitating their removal prior to phylogenetic and other analyses. Given the increased interest in inteins, more studies are focusing on identifying inteins within a set of genomes or other large datasets. The process of screening peptide sequences for the presence of inteins has not been consolidated into a single pipeline. To address this, we developed InteinFinder, an automated pipeline for identifying, cataloging, and removing inteins from peptide sequences. InteinFinder accurately screens proteins for inteins and is scalable to large peptide sequence datasets.","title":"Background"},{"location":"#license","text":"","title":"License"},{"location":"#software","text":"Copyright (c) 2018 - 2023 Ryan M. Moore Licensed under the Apache License, Version 2.0 or the MIT license, at your option. This program may not be copied, modified, or distributed except according to those terms.","title":"Software"},{"location":"#documentation","text":"Copyright (c) 2022 - 2023 Ryan M. Moore. This documentation is licensed under a Creative Commons Attribution 4.0 International License .","title":"Documentation"},{"location":"cli/","text":"InteinFinder Command Line Interface InteinFinder's command line interface is very simple. There is only one required argument and two options. Required arguments config.toml : the config file in TOML format For more information about writing config files, see here . Options --help : display the help screen/man page --version : display version of the InteinFinder pipeline","title":"Command Line Interface"},{"location":"cli/#inteinfinder-command-line-interface","text":"InteinFinder's command line interface is very simple. There is only one required argument and two options.","title":"InteinFinder Command Line Interface"},{"location":"cli/#required-arguments","text":"config.toml : the config file in TOML format For more information about writing config files, see here .","title":"Required arguments"},{"location":"cli/#options","text":"--help : display the help screen/man page --version : display version of the InteinFinder pipeline","title":"Options"},{"location":"config-files/","text":"Config Files There are a lot of options that you can specify when running InteinFinder. The config file is how you specify those options. InteinFinder config files are written in TOML , which is (supposed to) prioritize ease of reading and writing. Hopefully you agree :) Example Here is an example with all the available options given with their default values. Note: Most of these are optional! Double quote your strings You can break arrays across multiple lines if you want to! Any line starting with a # is a comment. That means that they are ignored. You can use them for your own clarification, or whatever you need. # General I/O queries = \"path/to/queries.faa\" out_dir = \"path/to/output_directory\" # InteinFinder DB location inteins = \"path/to/intein_db.faa\" smp_dir = \"path/to/smp_directory\" # All options below this line are optional! # General pipeline options log_level = \"info\" clip_region_padding = 10 min_query_length = 100 min_region_length = 100 remove_aln_files = true threads = 1 [makeprofiledb] exe = \"makeprofiledb\" [mafft] exe = mafft [mmseqs] exe = mmseqs evalue = 1e-3 num_iterations = 2 sensitivity = 5.7 [rpsblast] exe = \"rpsblast+\" evalue = 1e-3 [start_residue] # Tier 1 C = \"T1\" S = \"T1\" A = \"T1\" Q = \"T1\" P = \"T1\" T = \"T1\" # Tier 2 V = \"T2\" G = \"T2\" L = \"T2\" M = \"T2\" N = \"T2\" F = \"T2\" [end_residues] # Tier 1 HN = \"T1\" SN = \"T1\" GN = \"T1\" GQ = \"T1\" LD = \"T1\" FN = \"T1\" # Tier 2 KN = \"T2\" DY = \"T2\" SQ = \"T2\" HQ = \"T2\" NS = \"T2\" AN = \"T2\" SD = \"T2\" TH = \"T2\" RD = \"T2\" PY = \"T2\" YN = \"T2\" VH = \"T2\" KQ = \"T2\" PP = \"T2\" NT = \"T2\" CN = \"T2\" LH = \"T2\" [end_plus_one_residue] S = \"T1\" T = \"T1\" C = \"T1\" Details Let's go into detail on each set of options. Note: I will try to keep this in sync with the code, but if you notice it is not, then please file an issue ! A note about paths For any option that takes a path to a file or directory ( inteins , queries , smp_dir , and out_dir ), you can use a relative path if you want. But keep in mind that it will be relative to the location in which you run InteinFinder, not the location in which the config file resides . If that is confusing, you may want to stick to absolute paths. General I/O queries Path to the file containing the query peptide sequences that you want to check for inteins out_dir Path to the output directory in which InteinFinder will dump its output Will be created if it does not exist Pipeline will fail if it does exist Both these options are required . InteinFinder DB location inteins Path to the file containing the intein DB you want to search against In most cases, you will use the file included with InteinFinder, but you can always use your own. smp_dir Path to the directory containing SMP files to search against This is the file format that rpsblast uses ( link ). In most cases, you will use the files included with InteinFinder, but you can always use your own. Both these options are required . General pipeline options These config pairs are all optional . That means if you leave them out of your config file, they will be assigned to their default values. clip_region_padding The \"padding\" added to each side of the hit region to \"clip\" from the query sequence and include in the alignment files A value of 10 means add ten residues to each side of the clipping region. (You probably don't want to mess with this.) default value: 10 log_level Options from least verbose to most verbose: error , warning , info , and debug default value: \"info\" min_query_length Ignore all queries sequences whose length is less than this value. default value: 100 min_region_length Don't try to refine any hit regions whose length is less than this value. It sounds like you might lose cool info with this option, but you really won't. The shortest intein included in InteinFinder's DB is greater than 100 AAs in length. That means that any hit regions shorter than this can never pass all the checks anyway. But don't worry, they still show up in the putative intein regions file! default value: 100 remove_aln_files Set to true (or leave it out) if you want to remove the alignment files. Set to false if you want to keep the alignment files. While this sounds cool, in practice it's not so fun, as it can dump a TON of files. Generally, you might use this option if: you have a small number queries you really want to look at the aligments you found something weird and need to figure out what is going on you found a bug and submitted a bug report, but Ryan (aka me) asked you for the intermediate alignment files :) default value: true threads Number of threads/cores/CPUs to use for the parts of the pipeline that can run in parallel For MMseqs2, this is the threads option. For RPSBLAST, it is the number of concurrent search jobs that are run For running alignments, it controls how many alignment jobs are run concurrently. A reasonable value is close to the number of cores your machine has. default value: 1 Key intein residues You can customize the key intein residues that InteinFinder pipeline will check for. The defaults are based on a combination of literature support and frequency in known/annotated inteins, so you may not need to adjust them. However, you have the power if you need to! All of these tables are optional . Be careful though: if you specify one of the following options, then you need to fully specify that option. Here is an incorrect example....You want to change start residue G from tier 2 to tier 1, but you want all other residues to be the same. The following will NOT do that. [start_residue] G = \"T1\" Why will that not work? Because you are saying for start residue, G is a tier 1 pass and all other residues that you didn't specify should be considered as Fail . Tiers InteinFinder uses the concept of tiers in its scoring scheme. You can find an explanation of that here or in the manuscript . Pass tiers To specify tier 1 pass, you use \"T1\" To specify tier 2 pass, you use \"T2\" Etc. Fail Any residue not explicitly listed as one of the pass tiers is considered a Fail Start residue The table to control start residue tiers is [start_residue] . The start residue is the first amino acid of the predicted intein. Defaults: Tier 1 pass: C, S, A, Q, P, T Tier 2 pass: V, G, L, M, N, F Fail: any other residue If you want the default, simply leave out the entire table! End residues Control the final two residues with [end_residues] . The end residues are the final two amino acids of the predicted intein. Defaults: Tier 1 pass: HN, SN, GN, GQ, LD, FN Tier 2 pass: KN, DY, SQ, HQ, NS, AN, SD, TH, RD, PY, YN, VH, KQ, PP, NT, CN, LH Fail: any other AA pair If you want the default, simply leave out the entire table! End plus one residue This is the C-terminal extein residue check. It's called \"end plus one\" just for clarity, as in one residue past the end of the intein. Control the residues considered for pass and strict pass with [end_plus_one_residues] table Like the last couple of options, if you want the default, simply leave out the entire table! Defaults: Tier 1 pass: S, T, C Fail: any other AA pair External program options Now we should talk about how to set certain options in the external programs that the InteinFinder pipeline uses. The options for each program are specified using a table. makeprofiledb The makeprofiledb program is used to make the database used for the rpsblast search. It is why you need to specify the smp_dir . There is only one option for this table: exe The name of the executable program Also, you could pass in a path to the program (TODO add a test for this) default value: makeprofiledb Note that this default value assumes that the program is on your PATH MAFFT MAFFT is used to do the alignments when refining putative intein regions. exe The name of the executable program Also, you could pass in a path to the program (TODO add a test for this) default value: mafft Note that this default value assumes that the program is on your path MMseqs2 MMseqs2 is used to search queries against intein sequences exe The name of the executable program Also, you could pass in a path to the program (TODO add a test for this) default value: mmseqs Note that this default value assumes that the program is on your path evalue default value: 1e-3 num_iterations default value: 2 sensitivity default value: 5.7 RPSBLAST exe The name of the executable program Also, you could pass in a path to the program (TODO add a test for this) default value: rpsblast+ Note that this default value assumes that the program is on you PATH There is a good chance that you will change this to rpsblast . On my system, it's called rpsblast+ , but I'm not sure which is more common. evalue default value: 1e-3","title":"Config files"},{"location":"config-files/#config-files","text":"There are a lot of options that you can specify when running InteinFinder. The config file is how you specify those options. InteinFinder config files are written in TOML , which is (supposed to) prioritize ease of reading and writing. Hopefully you agree :)","title":"Config Files"},{"location":"config-files/#example","text":"Here is an example with all the available options given with their default values. Note: Most of these are optional! Double quote your strings You can break arrays across multiple lines if you want to! Any line starting with a # is a comment. That means that they are ignored. You can use them for your own clarification, or whatever you need. # General I/O queries = \"path/to/queries.faa\" out_dir = \"path/to/output_directory\" # InteinFinder DB location inteins = \"path/to/intein_db.faa\" smp_dir = \"path/to/smp_directory\" # All options below this line are optional! # General pipeline options log_level = \"info\" clip_region_padding = 10 min_query_length = 100 min_region_length = 100 remove_aln_files = true threads = 1 [makeprofiledb] exe = \"makeprofiledb\" [mafft] exe = mafft [mmseqs] exe = mmseqs evalue = 1e-3 num_iterations = 2 sensitivity = 5.7 [rpsblast] exe = \"rpsblast+\" evalue = 1e-3 [start_residue] # Tier 1 C = \"T1\" S = \"T1\" A = \"T1\" Q = \"T1\" P = \"T1\" T = \"T1\" # Tier 2 V = \"T2\" G = \"T2\" L = \"T2\" M = \"T2\" N = \"T2\" F = \"T2\" [end_residues] # Tier 1 HN = \"T1\" SN = \"T1\" GN = \"T1\" GQ = \"T1\" LD = \"T1\" FN = \"T1\" # Tier 2 KN = \"T2\" DY = \"T2\" SQ = \"T2\" HQ = \"T2\" NS = \"T2\" AN = \"T2\" SD = \"T2\" TH = \"T2\" RD = \"T2\" PY = \"T2\" YN = \"T2\" VH = \"T2\" KQ = \"T2\" PP = \"T2\" NT = \"T2\" CN = \"T2\" LH = \"T2\" [end_plus_one_residue] S = \"T1\" T = \"T1\" C = \"T1\"","title":"Example"},{"location":"config-files/#details","text":"Let's go into detail on each set of options. Note: I will try to keep this in sync with the code, but if you notice it is not, then please file an issue !","title":"Details"},{"location":"config-files/#a-note-about-paths","text":"For any option that takes a path to a file or directory ( inteins , queries , smp_dir , and out_dir ), you can use a relative path if you want. But keep in mind that it will be relative to the location in which you run InteinFinder, not the location in which the config file resides . If that is confusing, you may want to stick to absolute paths.","title":"A note about paths"},{"location":"config-files/#general-io","text":"queries Path to the file containing the query peptide sequences that you want to check for inteins out_dir Path to the output directory in which InteinFinder will dump its output Will be created if it does not exist Pipeline will fail if it does exist Both these options are required .","title":"General I/O"},{"location":"config-files/#inteinfinder-db-location","text":"inteins Path to the file containing the intein DB you want to search against In most cases, you will use the file included with InteinFinder, but you can always use your own. smp_dir Path to the directory containing SMP files to search against This is the file format that rpsblast uses ( link ). In most cases, you will use the files included with InteinFinder, but you can always use your own. Both these options are required .","title":"InteinFinder DB location"},{"location":"config-files/#general-pipeline-options","text":"These config pairs are all optional . That means if you leave them out of your config file, they will be assigned to their default values. clip_region_padding The \"padding\" added to each side of the hit region to \"clip\" from the query sequence and include in the alignment files A value of 10 means add ten residues to each side of the clipping region. (You probably don't want to mess with this.) default value: 10 log_level Options from least verbose to most verbose: error , warning , info , and debug default value: \"info\" min_query_length Ignore all queries sequences whose length is less than this value. default value: 100 min_region_length Don't try to refine any hit regions whose length is less than this value. It sounds like you might lose cool info with this option, but you really won't. The shortest intein included in InteinFinder's DB is greater than 100 AAs in length. That means that any hit regions shorter than this can never pass all the checks anyway. But don't worry, they still show up in the putative intein regions file! default value: 100 remove_aln_files Set to true (or leave it out) if you want to remove the alignment files. Set to false if you want to keep the alignment files. While this sounds cool, in practice it's not so fun, as it can dump a TON of files. Generally, you might use this option if: you have a small number queries you really want to look at the aligments you found something weird and need to figure out what is going on you found a bug and submitted a bug report, but Ryan (aka me) asked you for the intermediate alignment files :) default value: true threads Number of threads/cores/CPUs to use for the parts of the pipeline that can run in parallel For MMseqs2, this is the threads option. For RPSBLAST, it is the number of concurrent search jobs that are run For running alignments, it controls how many alignment jobs are run concurrently. A reasonable value is close to the number of cores your machine has. default value: 1","title":"General pipeline options"},{"location":"config-files/#key-intein-residues","text":"You can customize the key intein residues that InteinFinder pipeline will check for. The defaults are based on a combination of literature support and frequency in known/annotated inteins, so you may not need to adjust them. However, you have the power if you need to! All of these tables are optional . Be careful though: if you specify one of the following options, then you need to fully specify that option. Here is an incorrect example....You want to change start residue G from tier 2 to tier 1, but you want all other residues to be the same. The following will NOT do that. [start_residue] G = \"T1\" Why will that not work? Because you are saying for start residue, G is a tier 1 pass and all other residues that you didn't specify should be considered as Fail .","title":"Key intein residues"},{"location":"config-files/#tiers","text":"InteinFinder uses the concept of tiers in its scoring scheme. You can find an explanation of that here or in the manuscript . Pass tiers To specify tier 1 pass, you use \"T1\" To specify tier 2 pass, you use \"T2\" Etc. Fail Any residue not explicitly listed as one of the pass tiers is considered a Fail","title":"Tiers"},{"location":"config-files/#start-residue","text":"The table to control start residue tiers is [start_residue] . The start residue is the first amino acid of the predicted intein. Defaults: Tier 1 pass: C, S, A, Q, P, T Tier 2 pass: V, G, L, M, N, F Fail: any other residue If you want the default, simply leave out the entire table!","title":"Start residue"},{"location":"config-files/#end-residues","text":"Control the final two residues with [end_residues] . The end residues are the final two amino acids of the predicted intein. Defaults: Tier 1 pass: HN, SN, GN, GQ, LD, FN Tier 2 pass: KN, DY, SQ, HQ, NS, AN, SD, TH, RD, PY, YN, VH, KQ, PP, NT, CN, LH Fail: any other AA pair If you want the default, simply leave out the entire table!","title":"End residues"},{"location":"config-files/#end-plus-one-residue","text":"This is the C-terminal extein residue check. It's called \"end plus one\" just for clarity, as in one residue past the end of the intein. Control the residues considered for pass and strict pass with [end_plus_one_residues] table Like the last couple of options, if you want the default, simply leave out the entire table! Defaults: Tier 1 pass: S, T, C Fail: any other AA pair","title":"End plus one residue"},{"location":"config-files/#external-program-options","text":"Now we should talk about how to set certain options in the external programs that the InteinFinder pipeline uses. The options for each program are specified using a table.","title":"External program options"},{"location":"config-files/#makeprofiledb","text":"The makeprofiledb program is used to make the database used for the rpsblast search. It is why you need to specify the smp_dir . There is only one option for this table: exe The name of the executable program Also, you could pass in a path to the program (TODO add a test for this) default value: makeprofiledb Note that this default value assumes that the program is on your PATH","title":"makeprofiledb"},{"location":"config-files/#mafft","text":"MAFFT is used to do the alignments when refining putative intein regions. exe The name of the executable program Also, you could pass in a path to the program (TODO add a test for this) default value: mafft Note that this default value assumes that the program is on your path","title":"MAFFT"},{"location":"config-files/#mmseqs2","text":"MMseqs2 is used to search queries against intein sequences exe The name of the executable program Also, you could pass in a path to the program (TODO add a test for this) default value: mmseqs Note that this default value assumes that the program is on your path evalue default value: 1e-3 num_iterations default value: 2 sensitivity default value: 5.7","title":"MMseqs2"},{"location":"config-files/#rpsblast","text":"exe The name of the executable program Also, you could pass in a path to the program (TODO add a test for this) default value: rpsblast+ Note that this default value assumes that the program is on you PATH There is a good chance that you will change this to rpsblast . On my system, it's called rpsblast+ , but I'm not sure which is more common. evalue default value: 1e-3","title":"RPSBLAST"},{"location":"getting-started/","text":"Getting Started Install InteinFinder The quick start guide assumes you already have InteinFinder installed. See installing external dependencies , and installing precompiled binaries for some quick info about installation. Get needed assets You need a file of inteins and a file of conserved domain models. InteinFinder comes with these for your convenience. But expert users may have their own set to use instead. Here are links to find them on GitHub intein sequences directory containing intein sequence DB In the manuscript, this is referred to as the ISDB (intein sequence database) conserved domain models directory containing conserved domain models In the manuscript, this is referred to as the CDMDB (conserved domain model data base) asset bundle Use this link for an archive containing both the intein sequence DB and the conserved domain model DB. It's the same data, but in a form convenient for direct download. Here is an example for downloading the assets using the bundled archive: $ mkdir InteinFinder_assets $ cd InteinFinder_assets $ \\curl -L \\ https://github.com/mooreryan/InteinFinder/tree/main/_assets/asset_bundle.tar.gz \\ | tar xz $ tree intein_sequences/ \u2514\u2500\u2500 all_derep.faa smp/ \u251c\u2500\u2500 cd00081.smp \u251c\u2500\u2500 cd00085.smp \u251c\u2500\u2500 cd09643.smp \u251c\u2500\u2500 COG1372.smp \u251c\u2500\u2500 COG1403.smp \u251c\u2500\u2500 COG2356.smp \u251c\u2500\u2500 pfam01844.smp \u251c\u2500\u2500 pfam04231.smp \u251c\u2500\u2500 pfam05204.smp \u251c\u2500\u2500 pfam05551.smp \u251c\u2500\u2500 pfam07510.smp \u251c\u2500\u2500 pfam12639.smp \u251c\u2500\u2500 pfam13391.smp \u251c\u2500\u2500 pfam13392.smp \u251c\u2500\u2500 pfam13395.smp \u251c\u2500\u2500 pfam13403.smp \u251c\u2500\u2500 pfam14414.smp \u251c\u2500\u2500 pfam14527.smp \u251c\u2500\u2500 pfam14528.smp \u251c\u2500\u2500 pfam14623.smp \u251c\u2500\u2500 pfam14890.smp \u251c\u2500\u2500 PRK11295.smp \u251c\u2500\u2500 PRK15137.smp \u251c\u2500\u2500 smart00305.smp \u251c\u2500\u2500 smart00306.smp \u251c\u2500\u2500 smart00507.smp \u251c\u2500\u2500 TIGR01443.smp \u251c\u2500\u2500 TIGR01445.smp \u2514\u2500\u2500 TIGR02646.smp 0 directories, 29 files Make a config file Config files are in TOML format. Here is an example. *Note: all paths are relative to the directory in which you run the InteinFinder executable. TODO: does the ~ work in the paths? TODO: does the folder work with trailing slash? Let's assume that I have the InteinFinder source directory in the /home/ryan/projects/InteinFinder directory, and that I left the _assets directory that I mention above in its original place in the source directory. Assume that in the current directory, I have this fasta file: rnr_5.faa . Note: If you look at this file, you will see that it is pretty weird. It has some \"special\" sequences constructed for use in InteinFinder's end-to-end tests. Assume you have saved this file as config.toml in the same directory in which you have the rnr_5.faa fasta file. # Intein target sequences inteins = \"/home/ryan/projects/InteinFinder/_assets/intein_sequences/all_derep.faa\" # Directory of conserved domain models smp_dir = \"/home/ryan/projects/InteinFinder/_assets/smp\" # My query sequences that I want to search queries = \"rnr_5.faa\" # The pipeline's output directory out_dir = \"intein_finder_output\" # The number of threads to use threads = 4 Run the pipeline Assuming that the InteinFinder binary is somewhere on your path , then you can run InteinFinder like so: $ InteinFinder config.toml INFO [2023-01-24 20:12:01] Renaming queries INFO [2023-01-24 20:12:01] Splitting queries INFO [2023-01-24 20:12:01] Making profile DB INFO [2023-01-24 20:12:01] Running rpsblast INFO [2023-01-24 20:12:01] Running mmseqs INFO [2023-01-24 20:12:04] Getting query regions INFO [2023-01-24 20:12:04] Writing putative intein regions INFO [2023-01-24 20:12:04] Getting queries with intein seq hits INFO [2023-01-24 20:12:04] Making query_region_hits INFO [2023-01-24 20:12:04] Reading intein DB into memory INFO [2023-01-24 20:12:04] Processing regions INFO [2023-01-24 20:12:27] Writing name map INFO [2023-01-24 20:12:27] Renaming queries in btab files INFO [2023-01-24 20:12:27] Summarizing intein DB search INFO [2023-01-24 20:12:27] Summarizing conserved domain DB search INFO [2023-01-24 20:12:27] Done! Finally, you will have output that looks something like this. $ tree intein_finder_output/ intein_finder_output/ \u251c\u2500\u2500 _done \u251c\u2500\u2500 logs \u2502 \u251c\u2500\u2500 1_config.toml \u2502 \u251c\u2500\u2500 2_pipeline_info.txt \u2502 \u2514\u2500\u2500 if_log.2023-01-24_20-12-01.515507.mmseqs_search.txt \u251c\u2500\u2500 results \u2502 \u251c\u2500\u2500 1_putative_intein_regions.tsv \u2502 \u251c\u2500\u2500 2_intein_hit_checks.tsv \u2502 \u2514\u2500\u2500 3_trimmed_inteins.faa \u2514\u2500\u2500 search \u251c\u2500\u2500 cdm_db \u2502 \u251c\u2500\u2500 1_cdm_db_search_out.tsv \u2502 \u2514\u2500\u2500 2_cdm_db_search_summary.tsv \u2514\u2500\u2500 intein_db \u251c\u2500\u2500 1_intein_db_search_out.tsv \u251c\u2500\u2500 2_intein_db_search_with_regions.tsv \u2514\u2500\u2500 3_intein_db_search_summary.tsv 5 directories, 12 files The various output files are described in more detail elsewhere in the manual.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#install-inteinfinder","text":"The quick start guide assumes you already have InteinFinder installed. See installing external dependencies , and installing precompiled binaries for some quick info about installation.","title":"Install InteinFinder"},{"location":"getting-started/#get-needed-assets","text":"You need a file of inteins and a file of conserved domain models. InteinFinder comes with these for your convenience. But expert users may have their own set to use instead. Here are links to find them on GitHub intein sequences directory containing intein sequence DB In the manuscript, this is referred to as the ISDB (intein sequence database) conserved domain models directory containing conserved domain models In the manuscript, this is referred to as the CDMDB (conserved domain model data base) asset bundle Use this link for an archive containing both the intein sequence DB and the conserved domain model DB. It's the same data, but in a form convenient for direct download. Here is an example for downloading the assets using the bundled archive: $ mkdir InteinFinder_assets $ cd InteinFinder_assets $ \\curl -L \\ https://github.com/mooreryan/InteinFinder/tree/main/_assets/asset_bundle.tar.gz \\ | tar xz $ tree intein_sequences/ \u2514\u2500\u2500 all_derep.faa smp/ \u251c\u2500\u2500 cd00081.smp \u251c\u2500\u2500 cd00085.smp \u251c\u2500\u2500 cd09643.smp \u251c\u2500\u2500 COG1372.smp \u251c\u2500\u2500 COG1403.smp \u251c\u2500\u2500 COG2356.smp \u251c\u2500\u2500 pfam01844.smp \u251c\u2500\u2500 pfam04231.smp \u251c\u2500\u2500 pfam05204.smp \u251c\u2500\u2500 pfam05551.smp \u251c\u2500\u2500 pfam07510.smp \u251c\u2500\u2500 pfam12639.smp \u251c\u2500\u2500 pfam13391.smp \u251c\u2500\u2500 pfam13392.smp \u251c\u2500\u2500 pfam13395.smp \u251c\u2500\u2500 pfam13403.smp \u251c\u2500\u2500 pfam14414.smp \u251c\u2500\u2500 pfam14527.smp \u251c\u2500\u2500 pfam14528.smp \u251c\u2500\u2500 pfam14623.smp \u251c\u2500\u2500 pfam14890.smp \u251c\u2500\u2500 PRK11295.smp \u251c\u2500\u2500 PRK15137.smp \u251c\u2500\u2500 smart00305.smp \u251c\u2500\u2500 smart00306.smp \u251c\u2500\u2500 smart00507.smp \u251c\u2500\u2500 TIGR01443.smp \u251c\u2500\u2500 TIGR01445.smp \u2514\u2500\u2500 TIGR02646.smp 0 directories, 29 files","title":"Get needed assets"},{"location":"getting-started/#make-a-config-file","text":"Config files are in TOML format. Here is an example. *Note: all paths are relative to the directory in which you run the InteinFinder executable. TODO: does the ~ work in the paths? TODO: does the folder work with trailing slash? Let's assume that I have the InteinFinder source directory in the /home/ryan/projects/InteinFinder directory, and that I left the _assets directory that I mention above in its original place in the source directory. Assume that in the current directory, I have this fasta file: rnr_5.faa . Note: If you look at this file, you will see that it is pretty weird. It has some \"special\" sequences constructed for use in InteinFinder's end-to-end tests. Assume you have saved this file as config.toml in the same directory in which you have the rnr_5.faa fasta file. # Intein target sequences inteins = \"/home/ryan/projects/InteinFinder/_assets/intein_sequences/all_derep.faa\" # Directory of conserved domain models smp_dir = \"/home/ryan/projects/InteinFinder/_assets/smp\" # My query sequences that I want to search queries = \"rnr_5.faa\" # The pipeline's output directory out_dir = \"intein_finder_output\" # The number of threads to use threads = 4","title":"Make a config file"},{"location":"getting-started/#run-the-pipeline","text":"Assuming that the InteinFinder binary is somewhere on your path , then you can run InteinFinder like so: $ InteinFinder config.toml INFO [2023-01-24 20:12:01] Renaming queries INFO [2023-01-24 20:12:01] Splitting queries INFO [2023-01-24 20:12:01] Making profile DB INFO [2023-01-24 20:12:01] Running rpsblast INFO [2023-01-24 20:12:01] Running mmseqs INFO [2023-01-24 20:12:04] Getting query regions INFO [2023-01-24 20:12:04] Writing putative intein regions INFO [2023-01-24 20:12:04] Getting queries with intein seq hits INFO [2023-01-24 20:12:04] Making query_region_hits INFO [2023-01-24 20:12:04] Reading intein DB into memory INFO [2023-01-24 20:12:04] Processing regions INFO [2023-01-24 20:12:27] Writing name map INFO [2023-01-24 20:12:27] Renaming queries in btab files INFO [2023-01-24 20:12:27] Summarizing intein DB search INFO [2023-01-24 20:12:27] Summarizing conserved domain DB search INFO [2023-01-24 20:12:27] Done! Finally, you will have output that looks something like this. $ tree intein_finder_output/ intein_finder_output/ \u251c\u2500\u2500 _done \u251c\u2500\u2500 logs \u2502 \u251c\u2500\u2500 1_config.toml \u2502 \u251c\u2500\u2500 2_pipeline_info.txt \u2502 \u2514\u2500\u2500 if_log.2023-01-24_20-12-01.515507.mmseqs_search.txt \u251c\u2500\u2500 results \u2502 \u251c\u2500\u2500 1_putative_intein_regions.tsv \u2502 \u251c\u2500\u2500 2_intein_hit_checks.tsv \u2502 \u2514\u2500\u2500 3_trimmed_inteins.faa \u2514\u2500\u2500 search \u251c\u2500\u2500 cdm_db \u2502 \u251c\u2500\u2500 1_cdm_db_search_out.tsv \u2502 \u2514\u2500\u2500 2_cdm_db_search_summary.tsv \u2514\u2500\u2500 intein_db \u251c\u2500\u2500 1_intein_db_search_out.tsv \u251c\u2500\u2500 2_intein_db_search_with_regions.tsv \u2514\u2500\u2500 3_intein_db_search_summary.tsv 5 directories, 12 files The various output files are described in more detail elsewhere in the manual.","title":"Run the pipeline"},{"location":"installing-external-dependencies/","text":"Installing External Dependencies InteinFinder relies on a few other software packages: MAFFT MMseqs2 NCBI BLAST+ (specifically, rpsblast and makeprofiledb ) For detailed instructions on installing these packages, please consult their respective installation pages. The InteinFinder pipeline's continuous integration testing is done with the following versions: MAFFT: v7.490 (2021/Oct/30) MMseqs2: 45111b641859ed0ddd875b94d6fd1aef1a675b7e makeprofiledb: 2.12.0 (Package: blast 2.12.0) rpsblast+: 2.12.0+ (Package: blast 2.12.0) In other words, InteinFinder is continuously tested with those software versions. Using other versions Other versions will likely work too, but they may give slightly different output, causing the tests to fail if you run them locally. (E.g., it's possible a different version of BLAST could give slightly different alignment of queries.) Occasionally, the command line interface of the external dependencies will change (e.g., mmseqs has changed a bit in the past). So, if you discover an error due to that, please submit a bug report (GitHub account required). For reference, InteinFinder pipeline assumes that the command line interface of its external dependencies work something like this: # MAFFT $ mafft --quiet --auto --thread 1 input.faa # MMseqs2 $ mmseqs easy-search QUERIES TARGETS OUT TMPDIR \\ --format-mode 2 -s X.X --num-iterations N -e X --threads N # RPSBLAST $ makeprofiledb -in DB_IN -out DB_OUT $ rpsblast -query QUERY -db DB_OUT \\ -num_threads 1 -outfmt 6 -out OUT -evalue X.X Again, occasionally a new release of one of those software dependencies could change the CLI. If you run into issues related to this, let me know! Example installation instructions Here are some basic instructions for installing the required software on the latest versions of macOS and Ubuntu Linux. Note: These instructions are taken from one of the GitHub actions that builds and tests InteinFinder , so if it is passing then these instructions should still work if you have a similar OS. Note: I am not able to test these instructions on Apple Silicon! For these instructions, replace the ${LOCAL_PATH} variable with whatever is appropriate for your environment. MAFFT Here is an example of downloading the source code for MAFFT and compiling it. MAFFT has pre-compiled binaries available on their site if you would rather use those. $ \\curl -L \\ https://mafft.cbrc.jp/alignment/software/mafft-7.490-without-extensions-src.tgz \\ | tar xz \\ && cd mafft-*/core/ && make clean && make && sudo make install MMseqs2 Here is how to download pre-compiled MMseqs2 binaries from GitHub. On Ubuntu $ \\curl -L \\ https://github.com/soedinglab/MMseqs2/releases/download/13-45111/mmseqs-linux-sse2.tar.gz \\ | tar xz \\ && mv mmseqs/bin/mmseqs \"$LOCAL_PATH\" On macOS $ \\curl -L \\ https://github.com/soedinglab/MMseqs2/releases/download/13-45111/mmseqs-osx-universal.tar.gz \\ | tar xz \\ && mv mmseqs/bin/mmseqs \"$LOCAL_PATH\" RPSBLAST Note that in these examples, I'm only bothering to move the rpsblast and makeprofiledb binaries to a location that is on the path. (Again, it's taken directly from the CI, which is why it is like this.) On Ubuntu $ \\curl -L \\ https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/2.12.0/ncbi-blast-2.12.0+-x64-linux.tar.gz \\ | tar xz \\ && mv ncbi-blast-2.12.0+/bin/rpsblast \"${LOCAL_PATH}/rpsblast+\" \\ && mv ncbi-blast-2.12.0+/bin/makeprofiledb \"${LOCAL_PATH}/makeprofiledb\" On macOS $ \\curl -L \\ https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/2.12.0/ncbi-blast-2.12.0+-x64-macosx.tar.gz \\ | tar xz \\ && mv ncbi-blast-2.12.0+/bin/rpsblast \"${LOCAL_PATH}/rpsblast+\" \\ && mv ncbi-blast-2.12.0+/bin/makeprofiledb \"${LOCAL_PATH}/makeprofiledb\"","title":"Installing External Software Dependencies"},{"location":"installing-external-dependencies/#installing-external-dependencies","text":"InteinFinder relies on a few other software packages: MAFFT MMseqs2 NCBI BLAST+ (specifically, rpsblast and makeprofiledb ) For detailed instructions on installing these packages, please consult their respective installation pages. The InteinFinder pipeline's continuous integration testing is done with the following versions: MAFFT: v7.490 (2021/Oct/30) MMseqs2: 45111b641859ed0ddd875b94d6fd1aef1a675b7e makeprofiledb: 2.12.0 (Package: blast 2.12.0) rpsblast+: 2.12.0+ (Package: blast 2.12.0) In other words, InteinFinder is continuously tested with those software versions.","title":"Installing External Dependencies"},{"location":"installing-external-dependencies/#using-other-versions","text":"Other versions will likely work too, but they may give slightly different output, causing the tests to fail if you run them locally. (E.g., it's possible a different version of BLAST could give slightly different alignment of queries.) Occasionally, the command line interface of the external dependencies will change (e.g., mmseqs has changed a bit in the past). So, if you discover an error due to that, please submit a bug report (GitHub account required). For reference, InteinFinder pipeline assumes that the command line interface of its external dependencies work something like this: # MAFFT $ mafft --quiet --auto --thread 1 input.faa # MMseqs2 $ mmseqs easy-search QUERIES TARGETS OUT TMPDIR \\ --format-mode 2 -s X.X --num-iterations N -e X --threads N # RPSBLAST $ makeprofiledb -in DB_IN -out DB_OUT $ rpsblast -query QUERY -db DB_OUT \\ -num_threads 1 -outfmt 6 -out OUT -evalue X.X Again, occasionally a new release of one of those software dependencies could change the CLI. If you run into issues related to this, let me know!","title":"Using other versions"},{"location":"installing-external-dependencies/#example-installation-instructions","text":"Here are some basic instructions for installing the required software on the latest versions of macOS and Ubuntu Linux. Note: These instructions are taken from one of the GitHub actions that builds and tests InteinFinder , so if it is passing then these instructions should still work if you have a similar OS. Note: I am not able to test these instructions on Apple Silicon! For these instructions, replace the ${LOCAL_PATH} variable with whatever is appropriate for your environment.","title":"Example installation instructions"},{"location":"installing-external-dependencies/#mafft","text":"Here is an example of downloading the source code for MAFFT and compiling it. MAFFT has pre-compiled binaries available on their site if you would rather use those. $ \\curl -L \\ https://mafft.cbrc.jp/alignment/software/mafft-7.490-without-extensions-src.tgz \\ | tar xz \\ && cd mafft-*/core/ && make clean && make && sudo make install","title":"MAFFT"},{"location":"installing-external-dependencies/#mmseqs2","text":"Here is how to download pre-compiled MMseqs2 binaries from GitHub.","title":"MMseqs2"},{"location":"installing-external-dependencies/#on-ubuntu","text":"$ \\curl -L \\ https://github.com/soedinglab/MMseqs2/releases/download/13-45111/mmseqs-linux-sse2.tar.gz \\ | tar xz \\ && mv mmseqs/bin/mmseqs \"$LOCAL_PATH\"","title":"On Ubuntu"},{"location":"installing-external-dependencies/#on-macos","text":"$ \\curl -L \\ https://github.com/soedinglab/MMseqs2/releases/download/13-45111/mmseqs-osx-universal.tar.gz \\ | tar xz \\ && mv mmseqs/bin/mmseqs \"$LOCAL_PATH\"","title":"On macOS"},{"location":"installing-external-dependencies/#rpsblast","text":"Note that in these examples, I'm only bothering to move the rpsblast and makeprofiledb binaries to a location that is on the path. (Again, it's taken directly from the CI, which is why it is like this.)","title":"RPSBLAST"},{"location":"installing-external-dependencies/#on-ubuntu_1","text":"$ \\curl -L \\ https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/2.12.0/ncbi-blast-2.12.0+-x64-linux.tar.gz \\ | tar xz \\ && mv ncbi-blast-2.12.0+/bin/rpsblast \"${LOCAL_PATH}/rpsblast+\" \\ && mv ncbi-blast-2.12.0+/bin/makeprofiledb \"${LOCAL_PATH}/makeprofiledb\"","title":"On Ubuntu"},{"location":"installing-external-dependencies/#on-macos_1","text":"$ \\curl -L \\ https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/2.12.0/ncbi-blast-2.12.0+-x64-macosx.tar.gz \\ | tar xz \\ && mv ncbi-blast-2.12.0+/bin/rpsblast \"${LOCAL_PATH}/rpsblast+\" \\ && mv ncbi-blast-2.12.0+/bin/makeprofiledb \"${LOCAL_PATH}/makeprofiledb\"","title":"On macOS"},{"location":"installing-from-source/","text":"Installing InteinFinder from source files Note: If you are not already an OCaml programmer, I recommend that you download one of the precompiled binaries or use the Docker image instead. It is never fun to set up a development environment in a language you are not familiar with! If you want to compile InteinFinder from source, you need to have a working OCaml development setup. Additionally, you will need to install GNU Make and the external dependencies that InteinFinder relies on. Set up OCaml development environment Instructions to set up an OCaml development environment can be found here or here . Get the code Use git to clone the git repository. $ git clone https://github.com/mooreryan/InteinFinder.git or download a release from here . Install OCaml dependencies cd InteinFinder opam install . --deps-only --with-doc --with-test Build, install, & run tests $ opam exec -- make build_release && opam exec -- make install_release If you want to run the tests, you can with $ opam exec -- make install_release Note that if you have different versions of the external dependencies , then the tests may fail for trivial reasons (like alignments being slightly different between MAFFT versions). Sanity check If all went well, this should give you the path to the InteinFinder executable file. $ which InteinFinder","title":"Installing From Source"},{"location":"installing-from-source/#installing-inteinfinder-from-source-files","text":"Note: If you are not already an OCaml programmer, I recommend that you download one of the precompiled binaries or use the Docker image instead. It is never fun to set up a development environment in a language you are not familiar with! If you want to compile InteinFinder from source, you need to have a working OCaml development setup. Additionally, you will need to install GNU Make and the external dependencies that InteinFinder relies on.","title":"Installing InteinFinder from source files"},{"location":"installing-from-source/#set-up-ocaml-development-environment","text":"Instructions to set up an OCaml development environment can be found here or here .","title":"Set up OCaml development environment"},{"location":"installing-from-source/#get-the-code","text":"Use git to clone the git repository. $ git clone https://github.com/mooreryan/InteinFinder.git or download a release from here .","title":"Get the code"},{"location":"installing-from-source/#install-ocaml-dependencies","text":"cd InteinFinder opam install . --deps-only --with-doc --with-test","title":"Install OCaml dependencies"},{"location":"installing-from-source/#build-install-run-tests","text":"$ opam exec -- make build_release && opam exec -- make install_release If you want to run the tests, you can with $ opam exec -- make install_release Note that if you have different versions of the external dependencies , then the tests may fail for trivial reasons (like alignments being slightly different between MAFFT versions).","title":"Build, install, &amp; run tests"},{"location":"installing-from-source/#sanity-check","text":"If all went well, this should give you the path to the InteinFinder executable file. $ which InteinFinder","title":"Sanity check"},{"location":"installing-precompiled-binaries/","text":"Installing Precompiled Binaries Probably the most straightforward way to use the InteinFinder program is to download one of the precompiled binaries available on the GitHub releases page. A couple different \"flavors\" are available: macOS Use this if you have a Mac Note that I have not tested it on the new Apple Silicon chips, but it should work with Rosetta. You will (likely) need to deal with the \"unidentified developer\" prompts This macOS user guide page has steps explaining how to open an app from an unidentified developer. Alternatively, here is a Macworld article explaining the steps with pictures. Linux This should work on most Linux systems with GLIBC version 2.31 or greater. It does have some dynamically linked C/C++ libraries, so it may not work if you have an older system (e.g., one with GLIBC older than 2.31). See the release page for more info. You can find them all on the releases page. Don't forget that after downloading one of the binaries, you will need to adjust the permissions to make it executable (e.g., chmod +x InteinFinder ). Before running InteinFinder, you will need to install the external dependencies that InteinFinder relies on. Example Here is an example of getting one of the InteinFinder binaries working: $ \\curl -L https://github.com/mooreryan/InteinFinder/releases/download/1.0.0-alpha/InteinFinder-linux.tar.gz \\ | tar xz $ cd InteinFinder-linux $ chmod 755 InteinFinder $ ./InteinFinder --help Note that it is for InteinFinder version 1.0.0-alpha and using the binary compiled for a Linux system. You can find other versions on the release page. Replace that with the version you want, or click the links directly on the releases page.","title":"Installing Precompiled Binaries"},{"location":"installing-precompiled-binaries/#installing-precompiled-binaries","text":"Probably the most straightforward way to use the InteinFinder program is to download one of the precompiled binaries available on the GitHub releases page. A couple different \"flavors\" are available: macOS Use this if you have a Mac Note that I have not tested it on the new Apple Silicon chips, but it should work with Rosetta. You will (likely) need to deal with the \"unidentified developer\" prompts This macOS user guide page has steps explaining how to open an app from an unidentified developer. Alternatively, here is a Macworld article explaining the steps with pictures. Linux This should work on most Linux systems with GLIBC version 2.31 or greater. It does have some dynamically linked C/C++ libraries, so it may not work if you have an older system (e.g., one with GLIBC older than 2.31). See the release page for more info. You can find them all on the releases page. Don't forget that after downloading one of the binaries, you will need to adjust the permissions to make it executable (e.g., chmod +x InteinFinder ). Before running InteinFinder, you will need to install the external dependencies that InteinFinder relies on.","title":"Installing Precompiled Binaries"},{"location":"installing-precompiled-binaries/#example","text":"Here is an example of getting one of the InteinFinder binaries working: $ \\curl -L https://github.com/mooreryan/InteinFinder/releases/download/1.0.0-alpha/InteinFinder-linux.tar.gz \\ | tar xz $ cd InteinFinder-linux $ chmod 755 InteinFinder $ ./InteinFinder --help Note that it is for InteinFinder version 1.0.0-alpha and using the binary compiled for a Linux system. You can find other versions on the release page. Replace that with the version you want, or click the links directly on the releases page.","title":"Example"},{"location":"installing-with-docker/","text":"Installing & Using InteinFinder with Docker Note: If you're using Windows, I think this is your only option. WSL may work, but I don't have a way to test it. Note: Some users have reported issues with Docker on Apple Silicon. Unfortunately, this is not something I am able to debug now. Note: If you use Docker, you won't have to install the external dependencies that InteinFinder relies on. (Other than Docker of course!) An easy way to get started with InteinFinder is by using the Docker image we have created. Install Docker First, you will need to install Docker on your computer. Run InteinFinder in Docker Now you can run InteinFinder inside of the Docker container. You can run Docker directly, or use one of the helper scripts . Using Docker directly You can get the main help screen like this. $ docker run \\ --rm \\ -v $(pwd):$(pwd) \\ -w $(pwd) \\ --user $(id -u):$(id -g) \\ ghcr.io/mooreryan/InteinFinder:VERSION \\ --help Note: just replace VERSION above with the actual Docker image version, e.g., TODO. Using helper scripts That's a lot to remember to type, so I recommend using one of the helper scripts . To \"install\" the scripts, just download them and put them somewhere on your PATH . Here's how you get the main help screen. It does the same thing as above. $ InteinFinder-docker --help When you use the script, you can just replace InteinFinder with InteinFinder-docker and you should be good. Docker gotchas There are some things to watch out for with Docker. Note that if you use the helper scripts rather than running the Docker CLI manually, these will be taken care of for you. Sometimes you need to provide the full path to a file. You need to make sure to mount a volume so the Docker container can read and write files on your hard disk. You probably want to set the working directory of the container to your current working directory (unless you want to specify absolute paths to everything). You probably want to explicitly set the user and group IDs. If you don't everything Docker creates will be owned by a different user. (At least that's how it works on Linux.) TODO: relative path config file issues","title":"Installing With Docker"},{"location":"installing-with-docker/#installing-using-inteinfinder-with-docker","text":"Note: If you're using Windows, I think this is your only option. WSL may work, but I don't have a way to test it. Note: Some users have reported issues with Docker on Apple Silicon. Unfortunately, this is not something I am able to debug now. Note: If you use Docker, you won't have to install the external dependencies that InteinFinder relies on. (Other than Docker of course!) An easy way to get started with InteinFinder is by using the Docker image we have created.","title":"Installing &amp; Using InteinFinder with Docker"},{"location":"installing-with-docker/#install-docker","text":"First, you will need to install Docker on your computer.","title":"Install Docker"},{"location":"installing-with-docker/#run-inteinfinder-in-docker","text":"Now you can run InteinFinder inside of the Docker container. You can run Docker directly, or use one of the helper scripts .","title":"Run InteinFinder in Docker"},{"location":"installing-with-docker/#using-docker-directly","text":"You can get the main help screen like this. $ docker run \\ --rm \\ -v $(pwd):$(pwd) \\ -w $(pwd) \\ --user $(id -u):$(id -g) \\ ghcr.io/mooreryan/InteinFinder:VERSION \\ --help Note: just replace VERSION above with the actual Docker image version, e.g., TODO.","title":"Using Docker directly"},{"location":"installing-with-docker/#using-helper-scripts","text":"That's a lot to remember to type, so I recommend using one of the helper scripts . To \"install\" the scripts, just download them and put them somewhere on your PATH . Here's how you get the main help screen. It does the same thing as above. $ InteinFinder-docker --help When you use the script, you can just replace InteinFinder with InteinFinder-docker and you should be good.","title":"Using helper scripts"},{"location":"installing-with-docker/#docker-gotchas","text":"There are some things to watch out for with Docker. Note that if you use the helper scripts rather than running the Docker CLI manually, these will be taken care of for you. Sometimes you need to provide the full path to a file. You need to make sure to mount a volume so the Docker container can read and write files on your hard disk. You probably want to set the working directory of the container to your current working directory (unless you want to specify absolute paths to everything). You probably want to explicitly set the user and group IDs. If you don't everything Docker creates will be owned by a different user. (At least that's how it works on Linux.) TODO: relative path config file issues","title":"Docker gotchas"},{"location":"intein-finder-output/","text":"InteinFinder Output Let's talk about the pipeline's output. Here is the example output from one of InteinFinder's tests . By default, the intermediate alignment files are not shown, but this time, we show them. Here it is: $ tree if_out if_out |-- _done |-- alignments | |-- 1_name_map.tsv | |-- mafft_out___seq_10___green_2018___seq_11___1___4.fa | |-- mafft_out___seq_10___inbase___seq_236___1___2.fa | |-- mafft_out___seq_10___kelley_2016___seq_1___1___3.fa | |-- mafft_out___seq_10___kelley_2016___seq_9___1___1.fa | |-- mafft_out___seq_11___green_2018___seq_11___1___4.fa | |-- mafft_out___seq_11___inbase___seq_236___1___2.fa | |-- mafft_out___seq_11___kelley_2016___seq_1___1___3.fa | |-- mafft_out___seq_11___kelley_2016___seq_9___1___1.fa | |-- mafft_out___seq_2___inbase___seq_440___2___1.fa | |-- mafft_out___seq_3___inbase___seq_219___1___1.fa | |-- mafft_out___seq_4___inbase___seq_440___2___1.fa | |-- mafft_out___seq_5___inbase___seq_524___1___1.fa | |-- mafft_out___seq_8___inbase___seq_524___1___1.fa | `-- mafft_out___seq_9___inbase___seq_524___1___1.fa |-- logs | |-- 1_config.toml | |-- 2_pipeline_info.txt | `-- if_log.DATE.mmseqs_search.txt |-- results | |-- 1_putative_intein_regions.tsv | |-- 2_intein_hit_info.tsv | |-- 2_intein_hit_checks.tsv | `-- 3_trimmed_inteins.faa `-- search |-- 1_intein_db_search_out.tsv |-- 1_cdm_db_search_out.tsv |-- 2_intein_db_search_summary.tsv `-- 2_cdm_db_search_summary.tsv _done First, you see a file called _done . It is an empty file, just there so you can see at a glance if the pipeline completed successfully. Alignments If you set remove_aln_files = false in the config file, you will see a directory called alignments . Within, there are all the alignment files generated by the pipeline, as well as a file, 1_name_map.tsv , which shows the mapping from internal sequence names used by the pipeline to the original names of the sequences. Note that in the other output files, the original sequence IDs are used, however, in the alignments folder, the internal names are used. So, you can use the name map file to figure out what is going on. The alignment file names contain the internal query ID, along with the InteinFinder DB sequence ID with which it was aligned. Logs The logs can be found in the logs directory. 1_config.toml : This is the original config file copied in to the output directory. It is here purely for convenience....I have found that it is easy for output directories and log files to get misplaced years after running a pipeline, so this should help you stay organized. 2_pipeline_info.txt Contains versions of all software used in the pipeline Shows the config options as interpreted by InteinFinder Since you don't have to supply optional values in the config file, you can use this file to see exactly what config options the pipeline has been run with. if_log.DATE.* Next you will see one or more files that have this format. If the pipeline succeeds, you will probably only see one for MMseqs2, as it dumps a lot of info even when it is successful. If the pipeline fails, you should see at least a few more files in here, containing information about what went wrong. Pipeline info Here is an example of how the 2_pipeline_info.txt file might look: Program Versions ================ InteinFinder version: 1.0.0-SNAPSHOT [3bbadae-dirty]. /usr/bin/mafft version: v7.490 (2021/Oct/30). /home/ryan/software/mmseqs/bin/mmseqs version: 45111b641859ed0ddd875b94d6fd1aef1a675b7e. /usr/bin/rpsblast+ version: rpsblast+: 2.12.0+. Package: blast 2.12.0, build Mar 8 2022 16:19:08. /usr/bin/makeprofiledb version: makeprofiledb: 2.12.0+. Package: blast 2.12.0, build Mar 8 2022 16:19:08. Working Directory ================= /home/ryan/projects/InteinFinder/test/cram/basic_usage/smoke_test.t Config ====== ((inteins_file ../../assets/all_derep.faa) (queries_file ../../assets/rnr_5.faa) (smp_dir ../../assets/smp) (out_dir if_out) (checks ((start_residue ((pass (A C P Q S T)) (maybe (F G L M N V)))) (end_residues ((pass (FN GN GQ HN LD SN)) (maybe (AN CN DY HQ KN KQ LH NS NT PP PY RD SD SQ TH VH YN)))) (end_plus_one_residue ((pass (C S T)) (maybe ()))))) (mafft ((exe /usr/bin/mafft) (max_concurrent_jobs 2))) (makeprofiledb ((exe /usr/bin/makeprofiledb))) (mmseqs ((exe /home/ryan/software/mmseqs/bin/mmseqs) (evalue 0.001) (num_iterations 2) (sensitivity 5.7) (threads 1))) (rpsblast ((exe /usr/bin/rpsblast+) (evalue 0.001) (num_splits 2))) (log_level info) (clip_region_padding 10) (min_query_length 100) (min_region_length 50) (remove_aln_files false)) There are three sections: Program Versions : contains info about the executable binary file as well as versions for all of the programs used in the pipeline Working Directory : The working directory from which the InteinFinder executable was run This is useful if you want to rerun the pipeline using the same config file, as you are allowed to use relative file paths in the config files. Config : all the options as interpreted from the config file Results The results directory contains the main \"results\" of the pipeline. Putative intein regions The 1_putative_intein_regions.tsv file contains coordinates of any putative intein regions for your queries. These regions are defined solely through homology to something any of the InteinFinder's databases (either the intein sequence database, or the conserved domain database). While these regions will many times contain actual inteins, regions may often be mobile elements or endonucleases, or things like that as many non-intein proteins may have hits to those items in the database. That is why InteinFinder does a few more steps to check for inteins. query : the query sequence ID region_index : 1-indexed, region ID (queries may have multiple hit regions) start : 1-indexed, inclusive start coordinate end : 1-indexed, inclusive end coordinate Intein sequence hits TODO: this file should move to the search output Putative intein regions are defined by hits to both intein sequences and conserved domains. Because hits to intein sequences are of particular importance, there is an output file, 2_intein_hit_info.tsv , that gives info about the queries that had hits specifically to inteins from InteinFinder's databases, and the region in which those hits occurred. This file is similar to the blast tab output format 6, with some added info at the beginning and the end. The first few columns describe the query, the intein DB hit, and the region in which that hit occurred. query region region_start region_end target The following fields are the same as from a blast tab output format 6 file. pident alnlen mismatch gapopen qstart qend tstart tend evalue bits Finally, two additional fields give the length of the query and target sequences. qlen tlen Intein hit checks Next, there is a file describing all the \"checks\" that InteinFinder does on the putative regions: 2_intein_hit_checks.tsv . This file has a lot of columns and basically all of the important info that the pipeline puts out. query region intein_target intein_start_minus_one intein_start intein_penultimate intein_end intein_end_plus_one intein_length start_residue_check end_residues_check end_plus_one_residue_check start_position_check end_position_check region_check overall_check","title":"Output"},{"location":"intein-finder-output/#inteinfinder-output","text":"Let's talk about the pipeline's output. Here is the example output from one of InteinFinder's tests . By default, the intermediate alignment files are not shown, but this time, we show them. Here it is: $ tree if_out if_out |-- _done |-- alignments | |-- 1_name_map.tsv | |-- mafft_out___seq_10___green_2018___seq_11___1___4.fa | |-- mafft_out___seq_10___inbase___seq_236___1___2.fa | |-- mafft_out___seq_10___kelley_2016___seq_1___1___3.fa | |-- mafft_out___seq_10___kelley_2016___seq_9___1___1.fa | |-- mafft_out___seq_11___green_2018___seq_11___1___4.fa | |-- mafft_out___seq_11___inbase___seq_236___1___2.fa | |-- mafft_out___seq_11___kelley_2016___seq_1___1___3.fa | |-- mafft_out___seq_11___kelley_2016___seq_9___1___1.fa | |-- mafft_out___seq_2___inbase___seq_440___2___1.fa | |-- mafft_out___seq_3___inbase___seq_219___1___1.fa | |-- mafft_out___seq_4___inbase___seq_440___2___1.fa | |-- mafft_out___seq_5___inbase___seq_524___1___1.fa | |-- mafft_out___seq_8___inbase___seq_524___1___1.fa | `-- mafft_out___seq_9___inbase___seq_524___1___1.fa |-- logs | |-- 1_config.toml | |-- 2_pipeline_info.txt | `-- if_log.DATE.mmseqs_search.txt |-- results | |-- 1_putative_intein_regions.tsv | |-- 2_intein_hit_info.tsv | |-- 2_intein_hit_checks.tsv | `-- 3_trimmed_inteins.faa `-- search |-- 1_intein_db_search_out.tsv |-- 1_cdm_db_search_out.tsv |-- 2_intein_db_search_summary.tsv `-- 2_cdm_db_search_summary.tsv","title":"InteinFinder Output"},{"location":"intein-finder-output/#_done","text":"First, you see a file called _done . It is an empty file, just there so you can see at a glance if the pipeline completed successfully.","title":"_done"},{"location":"intein-finder-output/#alignments","text":"If you set remove_aln_files = false in the config file, you will see a directory called alignments . Within, there are all the alignment files generated by the pipeline, as well as a file, 1_name_map.tsv , which shows the mapping from internal sequence names used by the pipeline to the original names of the sequences. Note that in the other output files, the original sequence IDs are used, however, in the alignments folder, the internal names are used. So, you can use the name map file to figure out what is going on. The alignment file names contain the internal query ID, along with the InteinFinder DB sequence ID with which it was aligned.","title":"Alignments"},{"location":"intein-finder-output/#logs","text":"The logs can be found in the logs directory. 1_config.toml : This is the original config file copied in to the output directory. It is here purely for convenience....I have found that it is easy for output directories and log files to get misplaced years after running a pipeline, so this should help you stay organized. 2_pipeline_info.txt Contains versions of all software used in the pipeline Shows the config options as interpreted by InteinFinder Since you don't have to supply optional values in the config file, you can use this file to see exactly what config options the pipeline has been run with. if_log.DATE.* Next you will see one or more files that have this format. If the pipeline succeeds, you will probably only see one for MMseqs2, as it dumps a lot of info even when it is successful. If the pipeline fails, you should see at least a few more files in here, containing information about what went wrong.","title":"Logs"},{"location":"intein-finder-output/#pipeline-info","text":"Here is an example of how the 2_pipeline_info.txt file might look: Program Versions ================ InteinFinder version: 1.0.0-SNAPSHOT [3bbadae-dirty]. /usr/bin/mafft version: v7.490 (2021/Oct/30). /home/ryan/software/mmseqs/bin/mmseqs version: 45111b641859ed0ddd875b94d6fd1aef1a675b7e. /usr/bin/rpsblast+ version: rpsblast+: 2.12.0+. Package: blast 2.12.0, build Mar 8 2022 16:19:08. /usr/bin/makeprofiledb version: makeprofiledb: 2.12.0+. Package: blast 2.12.0, build Mar 8 2022 16:19:08. Working Directory ================= /home/ryan/projects/InteinFinder/test/cram/basic_usage/smoke_test.t Config ====== ((inteins_file ../../assets/all_derep.faa) (queries_file ../../assets/rnr_5.faa) (smp_dir ../../assets/smp) (out_dir if_out) (checks ((start_residue ((pass (A C P Q S T)) (maybe (F G L M N V)))) (end_residues ((pass (FN GN GQ HN LD SN)) (maybe (AN CN DY HQ KN KQ LH NS NT PP PY RD SD SQ TH VH YN)))) (end_plus_one_residue ((pass (C S T)) (maybe ()))))) (mafft ((exe /usr/bin/mafft) (max_concurrent_jobs 2))) (makeprofiledb ((exe /usr/bin/makeprofiledb))) (mmseqs ((exe /home/ryan/software/mmseqs/bin/mmseqs) (evalue 0.001) (num_iterations 2) (sensitivity 5.7) (threads 1))) (rpsblast ((exe /usr/bin/rpsblast+) (evalue 0.001) (num_splits 2))) (log_level info) (clip_region_padding 10) (min_query_length 100) (min_region_length 50) (remove_aln_files false)) There are three sections: Program Versions : contains info about the executable binary file as well as versions for all of the programs used in the pipeline Working Directory : The working directory from which the InteinFinder executable was run This is useful if you want to rerun the pipeline using the same config file, as you are allowed to use relative file paths in the config files. Config : all the options as interpreted from the config file","title":"Pipeline info"},{"location":"intein-finder-output/#results","text":"The results directory contains the main \"results\" of the pipeline.","title":"Results"},{"location":"intein-finder-output/#putative-intein-regions","text":"The 1_putative_intein_regions.tsv file contains coordinates of any putative intein regions for your queries. These regions are defined solely through homology to something any of the InteinFinder's databases (either the intein sequence database, or the conserved domain database). While these regions will many times contain actual inteins, regions may often be mobile elements or endonucleases, or things like that as many non-intein proteins may have hits to those items in the database. That is why InteinFinder does a few more steps to check for inteins. query : the query sequence ID region_index : 1-indexed, region ID (queries may have multiple hit regions) start : 1-indexed, inclusive start coordinate end : 1-indexed, inclusive end coordinate","title":"Putative intein regions"},{"location":"intein-finder-output/#intein-sequence-hits","text":"TODO: this file should move to the search output Putative intein regions are defined by hits to both intein sequences and conserved domains. Because hits to intein sequences are of particular importance, there is an output file, 2_intein_hit_info.tsv , that gives info about the queries that had hits specifically to inteins from InteinFinder's databases, and the region in which those hits occurred. This file is similar to the blast tab output format 6, with some added info at the beginning and the end. The first few columns describe the query, the intein DB hit, and the region in which that hit occurred. query region region_start region_end target The following fields are the same as from a blast tab output format 6 file. pident alnlen mismatch gapopen qstart qend tstart tend evalue bits Finally, two additional fields give the length of the query and target sequences. qlen tlen","title":"Intein sequence hits"},{"location":"intein-finder-output/#intein-hit-checks","text":"Next, there is a file describing all the \"checks\" that InteinFinder does on the putative regions: 2_intein_hit_checks.tsv . This file has a lot of columns and basically all of the important info that the pipeline puts out. query region intein_target intein_start_minus_one intein_start intein_penultimate intein_end intein_end_plus_one intein_length start_residue_check end_residues_check end_plus_one_residue_check start_position_check end_position_check region_check overall_check","title":"Intein hit checks"},{"location":"other-examples/","text":"Lots of Examples You can find a lot of usage examples on GitHub . The stuff in there probably looks a bit weird, unless you are used to cram tests, but they are all tested under CI, so things that work in there will work and things that are broken in there, are expected to be broken. Again, they aren't very user friendly, but they do provide a bunch of example config files and they each exercise a different bit of InteinFinder's functionality. So, if you need some more examples, feel free to check them out.","title":"Other Examples"},{"location":"other-examples/#lots-of-examples","text":"You can find a lot of usage examples on GitHub . The stuff in there probably looks a bit weird, unless you are used to cram tests, but they are all tested under CI, so things that work in there will work and things that are broken in there, are expected to be broken. Again, they aren't very user friendly, but they do provide a bunch of example config files and they each exercise a different bit of InteinFinder's functionality. So, if you need some more examples, feel free to check them out.","title":"Lots of Examples"},{"location":"todo/","text":"To do Whoops, you hit a page that isn't finished yet! This documentation is a work in progress. If you feel as though something is missing, feel free to open an issue on the InteinFinder repository.","title":"To do"},{"location":"todo/#to-do","text":"Whoops, you hit a page that isn't finished yet! This documentation is a work in progress. If you feel as though something is missing, feel free to open an issue on the InteinFinder repository.","title":"To do"},{"location":"tutorials/","text":"Tutorials You can find some annotated tutorials about InteinFinder usage on GitHub .","title":"Tutorials"},{"location":"tutorials/#tutorials","text":"You can find some annotated tutorials about InteinFinder usage on GitHub .","title":"Tutorials"}]}